---
title: "Regresión dinámica"
author: "Eddie Aguilar"
format:
  html:
    self-contained: true
editor: source
---

```{r}
#| message: false
library("easypackages")
packages("tidyverse","fpp3", "tsibble", "feasts","fable", "patchwork")
library(plotly)
```


# Modelos de regresión dinámica

# 1. Introducción
# 2. Regresión con errores ARIMA en R con fable
# 3. Pronóstico
# 4. Regresión armónica dinámica

Las series de Fourier es un método alternativo de los dummies muy bueno para periodos estacionales muy largos. Ya que ARIMA y ETS son métodos que estiman estacionalidad, pero pierde efectividad entre mayor sea el periodo estacional, y que, las dummies estiman estacionalidad de cualquier tamaño, pero si es un periodo muy grande, se necesitarán muchas variables, el uso de series de Fourier es buena opción. 

Una serie de FOurier es una función básica trigonométrica, tiene un seno y un coseno. Al ser una función trigonométrica periódica, simula una estacionalidad y el uso de esta nos puede ayudar a pronosticar una serie estacional. 

Como se comentó, una serie de Fourier se consituye de un seno y coseno, y se pueden utilizar tantos pares de senos y cosenos como se desea. 

El número de pares es lo que cambiará la suavización o el ajuste del método a los datos de entrenamiento. Entre más pares, mejor ajuste (hay que tomar en cuenta el over-fitting).

El máximo absoluto de pares usados para un buen pronóstico es el periodo estacional $m / 2$.

Ejemplos de estacionalidades largas:

- Datos diarios, donde pueden tener estacionalidad anual. (m = 365)
- Datos semanales (m = 52)
- Datos por cada media hora con estacionalidad diaria. (m = 48)

Ventajas:

- Permite cualquier tamaño de estacionalidad.
- Se pueden simular varios tipos de estacionalidad al mismo tiempo (con distintas frecuencias).
- La suavización del patrón estacional es controlado.
- La dinámica de corto plazo puede ser controlada a través de errores ARIMA.


## Ejemplo

Gasto en comidas fuera de casa.

```{r}
aus_cafe <- aus_retail %>%
  filter(
    Industry == "Cafes, restaurants and takeaway food services",
    year(Month) %in% 2004:2018
  ) |> summarise(Turnover = sum(Turnover))
aus_cafe
autoplot(aus_cafe)
```
Probamos con varios niveles $K$ (número de pares):

```{r}
fit <- aus_cafe %>%
  model(
    `K = 1` = ARIMA(log(Turnover) ~ fourier(K = 1) + PDQ(0,0,0)),
    `K = 2` = ARIMA(log(Turnover) ~ fourier(K = 2) + PDQ(0,0,0)),
    `K = 3` = ARIMA(log(Turnover) ~ fourier(K = 3) + PDQ(0,0,0)),
    `K = 4` = ARIMA(log(Turnover) ~ fourier(K = 4) + PDQ(0,0,0)),
    `K = 5` = ARIMA(log(Turnover) ~ fourier(K = 5) + PDQ(0,0,0)),
    `K = 6` = ARIMA(log(Turnover) ~ fourier(K = 6) + PDQ(0,0,0))
  )
glance(fit)
```

```{r}
rep_model <- function(modelo) {
  print(strrep("- - ",18))
  print(paste("Modelo", modelo, sep = " "))
  fit %>% 
    select(all_of(modelo)) %>% 
    report()
}

names(fit) %>% 
  map(rep_model)

```

```{r}
p <- fit %>%
  forecast(h = "2 years") %>%
  autoplot(aus_cafe) +
  facet_wrap(vars(.model), ncol = 2) +
  guides(colour = FALSE) +
  geom_label(
    aes(x = yearmonth("2007 Jan"), y = 4250, label = paste0("AICc = ", format(AICc))),
    data = glance(fit)
  )
p
```

```{r}
p <- fit %>% 
  select(`K = 3`) %>% 
  forecast(h = "2 years") %>%
  autoplot(aus_cafe) +
  facet_wrap(vars(.model), ncol = 2) +
  guides(colour = FALSE)
p
```

## Ejemplo 2

```{r}
vic_elec
```

Usando datos cada hora: 

```{r}
(vic_elec_hour <- index_by(vic_elec, time = ~ floor_date(., unit="hour")) |> 
  summarise(demand = sum(Demand),
         mean_temp = mean(Temperature),
         max_temp = max(Temperature),
         holiday = any(Holiday)) |> 
    mutate(
      day_type = case_when(
        holiday ~ "holiday",
        wday(time) %in% 2:6 ~ "weekday",
        TRUE ~ "weekend"
      )))
```

```{r}
p <- autoplot(vic_elec_hour, demand, color = "blue")

ggplotly(p, dynamicTicks = TRUE) |> rangeslider()
```

```{r}
vic_elec_hour |> 
  ggplot(aes(x = mean_temp, y = demand, 
             color = holiday)) +
  geom_point(alpha = 0.5)
```

```{r}
vic_elec_hour |> 
  ggplot(aes(x = mean_temp, y = demand, 
             color = day_type)) +
  geom_point(alpha = 0.5)
```

```{r}
(train <- filter(vic_elec_hour, year(time) %in% 2012:2013))
```

```{r}
# maximos:
# year = 4380
# week = 84
# day = 12

fit <- train |>  
  model(
    Fourier = TSLM(log(demand) ~ fourier(period = "year", K = 438) + 
                      fourier(period = "week", K = 42) + 
                      fourier(period = "day", K = 6)))
glance(fit)
```
```{r}
fc <- forecast(fit, h = "1 year")
fc
```


```{r}
ggplot() +
  geom_line(vic_elec_hour, mapping = aes(x = time, y = demand)) + 
  geom_line(fc, mapping = aes(x = time, y = .mean), color = "blue", alpha = 0.8)
```


